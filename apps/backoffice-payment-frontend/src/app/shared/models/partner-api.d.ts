/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/partners/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a partner by ID
         * @description Returns a single partner by its unique database ID
         */
        get: operations["getById"];
        /**
         * Update an existing partner
         * @description Updates an existing partner using the provided ID and details.
         */
        put: operations["update"];
        post?: never;
        /**
         * Delete a partner by ID
         * @description Deletes the partner identified by its ID.
         */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a paginated list of partners
         * @description Returns partners. Pagination is supported using `page` and `size` query parameters.
         */
        get: operations["getPartners"];
        put?: never;
        /**
         * Create a new partner
         * @description Creates a new partner using the provided details.
         */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/partners/alias/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a partner by alias
         * @description Returns a single partner by its unique alias
         */
        get: operations["getByAlias"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Data Transfer Object for partner creation */
        CreatePartnerDTO: {
            /**
             * @description Unique alias of the partner
             * @example SwiftGateway
             */
            alias: string;
            /**
             * @description Type of the partner (e.g. internal, external, system)
             * @example external
             */
            type: string;
            /**
             * @description Direction of the flow
             * @example OUTBOUND
             * @enum {string}
             */
            direction: "INBOUND" | "OUTBOUND";
            /**
             * @description Related application name
             * @example SWIFT-APP
             */
            application?: string;
            /**
             * @description Type of the processed flow
             * @example MESSAGE
             * @enum {string}
             */
            processedFlowType: "MESSAGE" | "ALERTING" | "NOTIFICATION";
            /**
             * @description Free-form description of the partner
             * @example Partner for SWIFT transactions
             */
            description: string;
        };
        PagePartnerDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            last?: boolean;
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["PartnerDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"][];
            empty?: boolean;
        };
        PageableObject: {
            paged?: boolean;
            unpaged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"][];
        };
        /** @description Data Transfer Object of a partner */
        PartnerDTO: {
            /**
             * Format: int64
             * @description Unique identifier of the partner
             * @example 123
             */
            id?: number;
            /**
             * @description Unique alias of the partner
             * @example SwiftGateway
             */
            alias: string;
            /**
             * @description Type of the partner (e.g. internal, external, system)
             * @example external
             */
            type: string;
            /**
             * @description Direction of the flow
             * @example OUTBOUND
             * @enum {string}
             */
            direction: "INBOUND" | "OUTBOUND";
            /**
             * @description Related application name
             * @example SWIFT-APP
             */
            application?: string;
            /**
             * @description Type of the processed flow
             * @example MESSAGE
             * @enum {string}
             */
            processedFlowType: "MESSAGE" | "ALERTING" | "NOTIFICATION";
            /**
             * @description Free-form description of the partner
             * @example Partner for SWIFT transactions
             */
            description: string;
        };
        SortObject: {
            direction?: string;
            nullHandling?: string;
            ascending?: boolean;
            property?: string;
            ignoreCase?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the partner
                 * @example 42
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Partner found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PartnerDTO"];
                };
            };
            /** @description Partner not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PartnerDTO"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the partner to update
                 * @example 42
                 */
                id: number;
            };
            cookie?: never;
        };
        /** @description Updated partner details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePartnerDTO"];
            };
        };
        responses: {
            /** @description Partner successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Partner not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the partner to delete
                 * @example 42
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Partner successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Partner not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPartners: {
        parameters: {
            query?: {
                /**
                 * @description Page number to retrieve (0-based)
                 * @example 0
                 */
                page?: number;
                /**
                 * @description Number of elements per page
                 * @example 10
                 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All partners returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagePartnerDTO"];
                };
            };
            /** @description Partial content returned (there are more pages) */
            206: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagePartnerDTO"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Partner details to create */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePartnerDTO"];
            };
        };
        responses: {
            /** @description Partner successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getByAlias: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Alias of the partner
                 * @example partner-x
                 */
                alias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Partner found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PartnerDTO"];
                };
            };
            /** @description Partner not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PartnerDTO"];
                };
            };
        };
    };
}
