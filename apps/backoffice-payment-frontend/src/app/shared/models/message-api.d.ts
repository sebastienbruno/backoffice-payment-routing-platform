/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/messages/mock/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a mock message to the MQ queue
         * @description Sending a structured message to the MQ queue for testing purposes.
         */
        post: operations["sendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a paginated list of messages
         * @description Returns messages previously received from the MQ queue and stored in the database. Pagination is supported using `page` and `size` query parameters.
         */
        get: operations["getMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Data Transfer Object for message creation */
        CreateMessageDTO: {
            /**
             * @description Name of the sender application
             * @example backoffice-app
             */
            sender: string;
            /**
             * @description List of message recipients
             * @example [
             *       "partner-a",
             *       "partner-b"
             *     ]
             */
            recipients: string[];
            /**
             * @description Payload content of the message
             * @example ALERT|LEVEL:HIGH|TIMESTAMP:2025-04-02T11:30:00
             */
            payload: string;
        };
        /**
         * @description Data Transfer Object for a message
         * @example {
         *       "id": 123,
         *       "sender": "backoffice-app",
         *       "recipients": [
         *         "partner-a",
         *         "partner-b"
         *       ],
         *       "payload": "ALERT|LEVEL:HIGH|TIMESTAMP:2025-04-02T11:30:00"
         *     }
         */
        MessageDTO: {
            /**
             * Format: int64
             * @description Unique identifier of the message
             * @example 123
             */
            id?: number;
            /**
             * @description Name of the sender application
             * @example backoffice-app
             */
            sender?: string;
            /**
             * @description List of message recipients
             * @example [
             *       "partner-a",
             *       "partner-b"
             *     ]
             */
            recipients?: string[];
            /**
             * @description Payload content of the message
             * @example ALERT|LEVEL:HIGH|TIMESTAMP:2025-04-02T11:30:00
             */
            payload?: string;
        };
        PageMessageDTO: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["MessageDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"][];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"][];
            paged?: boolean;
            unpaged?: boolean;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            pageNumber?: number;
        };
        SortObject: {
            direction?: string;
            nullHandling?: string;
            ascending?: boolean;
            property?: string;
            ignoreCase?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The message payload to be sent to MQ as JSON */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMessageDTO"];
            };
        };
        responses: {
            /** @description Message successfully sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description MQ unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getMessages: {
        parameters: {
            query?: {
                /**
                 * @description Page number to retrieve (0-based)
                 * @example 0
                 */
                page?: number;
                /**
                 * @description Number of elements per page
                 * @example 10
                 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All messages returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageMessageDTO"];
                };
            };
            /** @description Partial content returned (there are more pages) */
            206: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageMessageDTO"];
                };
            };
        };
    };
}
